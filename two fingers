import cv2
from cvzone.HandTrackingModule import HandDetector
import cvzone
from threading import Thread
import numpy as np
from time import sleep
cap = cv2.VideoCapture(0)
cap.set(3,1280)
cap.set(4,720)
detector = HandDetector(detectionCon=0)
colorR = (255,0,255)

cx, cy, w, h =100, 100, 200, 200


def threaded_function(arg):
    f2 = open("lines.txt", "w")
    f2.write(str(arg))
    f2.close()
    sleep(0.25)
class dragrec():
    def __init__(self, poscenter, size=[200,200]):
        self.poscenter = poscenter
        self.size = size



    def update(self,cursor):
        cx, cy = self.poscenter
        w,h = self.size

        #if the index finger in the rectangle area
        if cx - w // 2 < cursor[0] < cx + w // 2 and \
                cy - h // 2 < cursor[1] < cy + h // 2:
            self.poscenter= cursor
            print(cursor)
rectList = []
for x in range(5):
    rectList.append(dragrec([x*250+150,150]))

while True:
    success, img = cap.read()
    img= cv2.flip(img,1)
    img = detector.findHands(img)
    lmList, _ = detector.findPosition(img)

    if lmList:

        l,_,_ =detector.findDistance(8,12,img, draw=False)

        if l<30:
            #if __name__ == "__main1__":

            cursor = lmList[8] #index finger tip landmark
            #call the update here
            for rect in rectList:
                rect.update(cursor)
            x , y = cursor
            thread = Thread(target=threaded_function, args=(x,))
            thread.start()
            thread.join()
            print("thread finished...exiting")


    imgNew = np.zeros_like(img, np.uint8)
    for rect in rectList:
        cx, cy = rect.poscenter
        w, h = rect.size

        #cv2.rectangle(imgNew, (cx-w//2, cy-h//2),
                      #(cx+w//2, cy+h//2), colorR, cv2.FILLED)
        #zcvzone.cornerRect(imgNew, (cx-w//2, cy-h//2, w, h),20, rt=0)

    out = img.copy()
    alpha=0.1
    mask = imgNew.astype(bool)
    out[mask] = cv2.addWeighted(img, alpha, imgNew, 1-alpha,0)[mask]

    cv2.imshow("image",out)
    cv2.waitKey(1)
